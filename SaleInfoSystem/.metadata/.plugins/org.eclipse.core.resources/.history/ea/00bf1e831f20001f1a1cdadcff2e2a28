package MergeSort;

public class MergeSort {
    
    public static void main(String[] args) {
    	
    	long startTime = System.currentTimeMillis(); // Start time function
        int[] array = {5, 3, 8, 2, 6, 10, 12, 100};
        array = mergeSort(array);
        System.out.println("Sorted array: ");
        for (int num : array) {
            System.out.print(num + " ");
        }
    }

    public static int[] mergeSort(int[] array) {
        // If the array has one or no elements, it is already sorted
        if (array.length <= 1) {
            return array;
        }

        // Step 1: Divide the array into two halves
        int mid = array.length / 2;
        int[] leftHalf = new int[mid];
        int[] rightHalf = new int[array.length - mid];

        System.arraycopy(array, 0, leftHalf, 0, mid);
        System.arraycopy(array, mid, rightHalf, 0, array.length - mid);

        // Step 2: Recursively sort both halves
        leftHalf = mergeSort(leftHalf);
        rightHalf = mergeSort(rightHalf);

        // Step 3: Merge the sorted halves
        return merge(leftHalf, rightHalf);
    }

    // Function to merge two sorted arrays
    public static int[] merge(int[] left, int[] right) {
        int[] result = new int[left.length + right.length];
        int leftIndex = 0, rightIndex = 0, resultIndex = 0;

        // Compare each element of the left and right arrays and merge them in order
        while (leftIndex < left.length && rightIndex < right.length) {
            if (left[leftIndex] < right[rightIndex]) {
                result[resultIndex++] = left[leftIndex++];
            } else {
                result[resultIndex++] = right[rightIndex++];
            }
        }

        // If there are remaining elements in the left array, add them to the result
        while (leftIndex < left.length) {
            result[resultIndex++] = left[leftIndex++];
        }

        // If there are remaining elements in the right array, add them to the result
        while (rightIndex < right.length) {
            result[resultIndex++] = right[rightIndex++];
        }

        return result;
    }
}
