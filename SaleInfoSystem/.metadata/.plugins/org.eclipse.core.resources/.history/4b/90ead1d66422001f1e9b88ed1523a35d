package ThreeDataStructure;

public class QueueAdt implements Queue {

    private Product[] queue;
    private int front;
    private int rear;
    private int maxSize;
    private int nItems;

    public QueueAdt(int maxSize) {
        this.maxSize = maxSize;
        front = 0;
        rear = -1;
        nItems = 0;
        queue = new Product[maxSize];
    }

    @Override
    public void enqueue(Product item) {
    	long startTimeList = System.currentTimeMillis(); 
        if (rear == maxSize - 1) {
            rear = -1;
        }
        queue[++rear] = item;
        nItems++;
        
        long endTimeList = System.currentTimeMillis();
        long totalTimeList = endTimeList - startTimeList;
        System.out.println("List Total time: " + totalTimeList + "ms");

        Runtime runtime = Runtime.getRuntime();
        runtime.gc(); // Optional, but may affect timing
        long totalMemoryList = runtime.totalMemory();
        long freeMemoryList = runtime.freeMemory();
        long usedMemoryList = totalMemoryList - freeMemoryList;
        long megabytesList = usedMemoryList / (1024L * 1024L);
        System.out.println("List Total Memory: " + megabytesList + " MB\n");
    }

    @Override
    public Product dequeue() {
        Product temp = queue[front++];
        if (front == maxSize) {
            front = 0;
        }
        nItems--;
        return temp;
    }

    @Override
    public Product first() {
        return queue[front];
    }

    @Override
    public boolean isFull() {
        return nItems == maxSize;
    }

    @Override
    public boolean isEmpty() {
        return nItems == 0;
    }

    @Override
    public int size() {
        return nItems;
    }
}
