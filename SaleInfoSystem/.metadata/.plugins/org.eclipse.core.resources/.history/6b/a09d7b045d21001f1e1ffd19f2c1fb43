package SaleInfoSystem;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;

public class CustomerOp implements CustomerInterface {
    
    Scanner sc = new Scanner(System.in);
    
    AdminProductOp adminProductOp = new AdminProductOp();
    static ArrayList<Product> productList = new ArrayList<>();
    
    private static int orderNumber = 0;
    private static final String ORDER_FILE = "customerOrders.txt";
    
    static ArrayList<Order> orderList = new ArrayList<>();
    
    SaleView sv = new SaleView();
    
    @Override
    public void searchProduct() {
        
        adminProductOp.currentProduct();
    
        System.out.println("** Welcome to Search Product Name ** ");
        System.out.print("Enter the Product Name: ");
        String name = sc.nextLine().trim(); // Trim spaces

        // Ensure the product list is sorted by name
        
        MergeSortName.mergeSortProductList(productList);

        // Perform the binary search
        BinarySearchByName.binarySearchProduct(AdminProductOp.productList, name);
    }

    @Override
    public void exitInterface() {
        System.out.println("Exiting the program...");
        System.exit(0); 
    }
    // Static block to initialize the order number from the file
    static {
        try {
            File file = new File(ORDER_FILE);
            if (file.exists()) {
                BufferedReader reader = new BufferedReader(new FileReader(file));
                String line;
                int maxOrderNumber = 0;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split(",");
                    int currentOrderNumber = Integer.parseInt(parts[0]);
                    if (currentOrderNumber > maxOrderNumber) {
                        maxOrderNumber = currentOrderNumber;
                    }
                }
                orderNumber = maxOrderNumber;
                reader.close();
            }
        } catch (IOException e) {
            System.err.println("Error initializing order number: " + e.getMessage());
        }
    }

    public void confirmOrder() {
        double totalCost = 0.0; // Variable to keep track of total cost
        adminProductOp.currentProduct(); // Display product information only once at the beginning

        boolean orderConfirmed = false; // Variable to track if the order is confirmed

        while (!orderConfirmed) {
            System.out.print("Enter Product id: ");
            int id = sc.nextInt();
            sc.nextLine();  // Consume the newline

            // Retrieve product details from the products.txt file
            Product product = getProductById(id);
            if (product == null) {
                System.out.println("Product ID not found.");
                continue; // Retry entering product info
            }

            System.out.print("Enter Product Quantity: ");
            int quantity = sc.nextInt();
            sc.nextLine();  // Consume the newline
            
            if (quantity <= 0 || quantity > product.getQuantity()) {
                System.out.println("Out of stock or invalid quantity.");
                continue; // Retry entering product info
            }
            double totalPrice = product.getPrice() * quantity;

            // Add the current item's total price to the total cost
            totalCost += totalPrice;

            System.out.print("Customer Name: ");
            String cus_nameInput = sc.nextLine();
            // Capitalize the first character
            String cus_name = cus_nameInput.substring(0, 1).toUpperCase() + cus_nameInput.substring(1);

            System.out.print("Customer Address: ");
            String cus_addr = sc.nextLine();

            System.out.print("Customer Phone Number: ");
            String cus_ph = sc.nextLine();
            
         // Display the total cost so far
            System.out.println("Total Cost of Current Orders: " + totalCost);
            
            System.out.print("Confirm Your Order (Yes or No) : ");
            String ans = sc.nextLine();
            if (ans.equalsIgnoreCase("Yes")) {
                System.out.println("Your Order has been Successfully confirmed.");

                // Update product quantity in the products.txt file
                updateProductQuantity(id, product.getQuantity() - quantity);

                // Increment the order number
                orderNumber++;

                // Save order data to file
                try (PrintWriter writer = new PrintWriter(new FileWriter(ORDER_FILE, true))) {
                    writer.println(orderNumber + "," + id + "," + product.getName() + "," + totalPrice + "," + quantity 
                    				+ "," + cus_name + "," + cus_addr + "," + cus_ph);
                    System.out.println("Order data saved to file.");
                } catch (IOException e) {
                    System.err.println("An error occurred while saving the order: " + e.getMessage());
                    e.printStackTrace();
                }

                // Display order data
//                displayOrderData();

                orderConfirmed = true; // Set orderConfirmed to true to exit the loop
            } else {
                System.out.println("Order canceled.");
                orderConfirmed = true;
                // If the order is canceled, exit the loop
            }
        }
    }



    private Product getProductById(int id) {
        for (Product product : AdminProductOp.productList) {
            if (product.getId() == id) {
                return product;
            }
        }
        return null;
    }

    
    private void updateProductQuantity(int id, int newQuantity) {
        // Update the product quantity in memory
        for (Product product : AdminProductOp.productList) {
            if (product.getId() == id) {
                product.setQuantity(newQuantity);
                break;
            }
        }

        // Write the updated product list to the file
        try (PrintWriter writer = new PrintWriter(new FileWriter("products.txt"))) {
            for (Product product : AdminProductOp.productList) {
                writer.println(product.getId() + "," + product.getName() + "," + product.getPrice() + ","
                				+ product.getQuantity() + "," + product.getCategory());
            }
        } catch (IOException e) {
            System.out.println("An error occurred while updating the products file.");
            e.printStackTrace();
        }
    }

    

	@Override
	public void displayAllProudcts() {
 
		adminProductOp.displayProduct();
		
	}

	@Override
	public void backToMain() {
		sv.view();
		
	}

    
}
